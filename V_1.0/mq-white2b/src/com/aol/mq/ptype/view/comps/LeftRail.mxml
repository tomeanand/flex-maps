<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo" height="100%"
		 width="100%" xmlns:comps="com.aol.mq.ptype.view.comps.*"
		 top="10" left="10" bottom="10" right="10" backgroundColor="#FFFFFF"  
		 verticalScrollPolicy="off" horizontalScrollPolicy="off" creationComplete="creationCompleteHandler(event)">


	<fx:Script>
		<![CDATA[
			import com.aol.mq.ptype.controller.GeoCodeManager;
			import com.aol.mq.ptype.controller.MapManger;
			import com.aol.mq.ptype.events.WinstonEvent;
			import com.aol.mq.ptype.model.ModelLocator;
			import com.aol.mq.ptype.utils.Constant;
			import com.aol.mq.ptype.vo.ManeuverVO;
			import com.aol.mq.ptype.vo.RouteVO;
			import com.aol.mq.ptype.vo.SearchVO;
			import com.mapquest.services.geocode.GeocoderLocation;
			import com.mapquest.tilemap.pois.Poi;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IViewCursor;
			import mx.controls.Alert;
			import mx.events.FlexEvent;

			private var geoManager:GeoCodeManager;

			private var index:Number = 0;
			private var model:ModelLocator = ModelLocator.getInstance();
			private var pageNumber:Number = 0;
			
			private var queries:ArrayCollection
			private var totalClick:Number = 0;
			private var totalResult:Number = 0;
			
			protected function addQueryCntl_clickHandler(event:MouseEvent):void
			{
				if(index<12)	{
					createQueryBox()
				}
				else	{
					mx.controls.Alert.show("Demo Version.");
				}
			}
			protected function back_clickHandler(event:MouseEvent):void
			{
				if(pageNumber>0)	{
					pageNumber --;
					showPageNavigation()
				}
				else	{
					trace("Back Out of range")
				}
			}
			protected function clickHandler(event:MouseEvent):void
			{
				if(queries.length<=1)	{
					MapManger.getInstance().dispatchEvent(new WinstonEvent(Constant.EVENT_SEARCH_PLACE,queries[0].getText()))
				}
				else	{
					var locations:Array = getRoutes();
					model.mapPanel.removeAllShapes();
					geoManager.batchGeoCode(locations)
				}
			}
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				geoManager = new GeoCodeManager(model.mapPanel.map.tileMap); 
				geoManager.addEventListener(Constant.EVENT_GEOCODED_AMBIGUITIES,showAmbiquities);
				MapManger.getInstance().addEventListener(Constant.EVENT_DISAMBIGUITIED,disambiguitedFinish);
				MapManger.getInstance().addEventListener(Constant.EVENT_DELETE_QUERY,deleteQuery);
				MapManger.getInstance().addEventListener(Constant.EVENT_SEARCH_BUSINESS,showBusiness);
				MapManger.getInstance().addEventListener(Constant.EVENT_SHOW_DIRECTIONS,showDirection);
				queries = new ArrayCollection();
				createQueryBox()
			}
			protected function front_clickHandler(event:MouseEvent):void
			{
				if(pageNumber+1<totalClick)	{
					pageNumber ++;	
					showPageNavigation()
				}
				else	{
					trace("Front Out of range")
				}
			}
			private function showAmbiquities(event:WinstonEvent):void	{
				var ambiList:ArrayCollection = event.data as ArrayCollection;
				var qbox:QueryBox;
				var isAmbiguited:Boolean = false;
				/**
				 * This is temp vars
				 * 
				 **/
				var poi:Poi;
				var loc:GeocoderLocation;
				var list:Array = new Array();
				var locList:Array = new Array();
				var ambiLocations:Array
				for(var i:Number = 0; i<queries.length; i++)	{
					qbox = queries[i] as QueryBox;
					ambiLocations = ambiList[i]
					qbox.ambiguities = ambiLocations ;
					if(ambiLocations.length >1)	{
						model.totalAmbiguites ++;
						isAmbiguited = true;
					}
					loc = ambiList[i][0];
					qbox.geoLocation = loc;
					poi = new Poi(loc.displayLatLng);
					poi.label = Number(i+1).toString();
					poi.infoTitle = loc.city+", "+loc.adminArea3;
					poi.infoWindowTitleText = loc.city+","+loc.adminArea3;
					poi.infoContent = getAddress(loc)
					list.push(poi);
					locList.push(loc);
				}
				model.mapPanel.removeAllShapes();
				if(!isAmbiguited)	{
					MapManger.getInstance().dispatchEvent(new WinstonEvent(Constant.EVENT_ROUTE_SELECT_SUCCESS,{poi:locList,loc:list}));
				}
				
				
			}
			private function disambiguitedFinish(event:WinstonEvent):void	{
				var ambiList:ArrayCollection = event.data as ArrayCollection;
				var qbox:QueryBox;
				
				var poi:Poi;
				var loc:GeocoderLocation;
				var list:Array = new Array();
				var locList:Array = new Array();
				var ambiLocations:Array
				for(var i:Number = 0; i<queries.length; i++)	{
					qbox = queries[i] as QueryBox;
					loc = qbox.geoLocation
					poi = new Poi(loc.displayLatLng);
					poi.label = Number(i+1).toString();
					poi.infoTitle = loc.city+", "+loc.adminArea3;
					poi.infoWindowTitleText = loc.city+","+loc.adminArea3;
					poi.infoContent = getAddress(loc)
					list.push(poi);
					locList.push(loc);
				}
			MapManger.getInstance().dispatchEvent(new WinstonEvent(Constant.EVENT_ROUTE_SELECT_SUCCESS,{poi:locList,loc:list}));
			}
			private function createQueryBox(isBack:Boolean = false):void	{
				var query:QueryBox
				if(!isBack)	{
					query = new QueryBox();
					query.index = index;
					index == 0 ? query.setText("Fluid Coffee Bar, Denver, CO") :  null;
					query.isRoute = index>0 ? true : false;
					queries.addItem(query);
				}
				queryHolder.removeAllElements();
				model.isRoute = (queries.length>1) ? true : false;
				
				var cursor:IViewCursor = queries.createCursor(); 
				var route:Boolean = queries.length>0 ? true : false;
				
				while(!cursor.afterLast)	{
					
					query = cursor.current as QueryBox;
					query.isRoute = index >0 ? true : false;
					query.lastItem = (query.index == index) ? true : false;
					query.setIcons();
					if(isBack)	{
						query.ambiguities = new Array();
					}
					queryHolder.addElement(query);
					cursor.moveNext();
				}
				index++;
				
				if(index <2){
					model.mapMode = Constant.MODE_SEARCH_BUSINESS;
					submitBtn.label = "Map It";
					addQueryCntl.text = "Get Directions"
				}
				else	{
					model.mapMode = Constant.MODE_SEARCH_ROUTE;
					submitBtn.label = "Get Directions";
					addQueryCntl.text = "Add destinations"
				}
			}
			private function deleteQuery(event:WinstonEvent):void	{
				var query:QueryBox;
				var qbox:QueryBox 
				var count:Number = 0;
				queryHolder.removeElement(event.data);
				queries.removeItemAt(event.data.index);
				model.isRoute = (queries.length<2) ? false : true;
				var cursor:IViewCursor = queries.createCursor();
				var boxes:Number = queryHolder.numElements;
				while(!cursor.afterLast)	{
					query = cursor.current as QueryBox;	
			 	 for(var i:Number = 0; i<boxes; i++)	{
						qbox = queryHolder.getElementAt(i) as QueryBox
						if(qbox == query)	{
							qbox.index = count
							query.index = count;
							query.setPoint(count);
							query.lastItem = (query.index == queries.length-1) ? true : false;
							query.setIcons();
							count++
							break;
						}
					}
				index = i+1; 
				cursor.moveNext();
				}
				if(index <2){
					ModelLocator.getInstance().mapMode = Constant.MODE_SEARCH_BUSINESS;
					submitBtn.label = "Map It";
					addQueryCntl.text = "Get Directions"
				}
				else	{
					model.mapMode = Constant.MODE_SEARCH_ROUTE;
					submitBtn.label = "Get Directions";
					addQueryCntl.text = "Add destinations"
				}
			}
			private function getRoutes():Array	{
				var locationCollection:Array = new Array();
				var location:GeocoderLocation;
				var qBox:QueryBox;
				var cursor:IViewCursor = queries.createCursor();
				while(!cursor.afterLast)	{
					qBox = cursor.current as QueryBox;
					location = new GeocoderLocation();
					location.location = qBox.getText();
					locationCollection.push(location);
					cursor.moveNext();
				}
				return locationCollection;
			}
			private function showBusiness(event:WinstonEvent):void	{
				pageNumber = 0
				totalClick = Math.ceil(model.bizData.length/Constant.ROW_PER_PAGE)
				totalResult = model.bizData.length;
				this.currentState = "resultState";
				showPageNavigation()
				
			}
			private function showDirection(event:WinstonEvent):void	{
				pageNumber = 0
				totalClick = Math.ceil(model.routeVO.maneuver.length/Constant.ROUTE_PER_PAGE)
				totalResult = model.routeVO.maneuver.length
				this.currentState = "routeState";
				showPageNavigation()
				
			}
			private function showPageNavigation():void	{
				var rowCount:Number = (this.currentState == "resultState") ? Constant.ROW_PER_PAGE : Constant.ROUTE_PER_PAGE;
				var endIndex:Number = ((pageNumber * rowCount) + rowCount)
				endIndex = endIndex > totalResult ? totalResult : endIndex
				var naviStr:String = ((pageNumber * rowCount)  + 1) + '-' + endIndex + ' of ' + (totalResult)
				var i:Number = 0;
				
				if(this.currentState == "resultState")	{
					navi1Txt.text = navi2Txt.text = naviStr;
					this.businessHolder.removeAllElements();
					var sdata :ArrayCollection = model.getPageBizData(pageNumber)//model.bizData as ArrayCollection;
					var btn:ItemBusiness;
					if(sdata!= null)	
						for(i = 0; i<sdata.length; i++)	{
							btn = new ItemBusiness();
							btn.vo = sdata[i] as SearchVO;
							businessHolder.addElement(btn);
							
							
						}
					bgBorder.height = 450
				}
				else if(this.currentState == "routeState")	{
					navi3Txt.text = navi4Txt.text = naviStr;
					routeHolder.removeAllElements();
					var routeVO:RouteVO = model.routeVO; 
					var routes:ArrayCollection = model.getPageManvrData(pageNumber)//routeVO.maneuver;
					var item:ItemRoute
					for(i=0; i<routes.length; i++)	{
						item = new ItemRoute();
						item.vo = routes[i] as ManeuverVO;
						
						this.routeHolder.addElement(item);
					}
					bgBorder.height = 470
				}
			}
			private function onBackClick(event:MouseEvent):void	{
				currentState ='queryState';
				this.createQueryBox(true);
				bgBorder.height = queryBox.height;
			}
			
			private function getAddress( loc:GeocoderLocation):String{
				var localAddr:String = "";
				
				
				//Create address string to display in the bubble
				if (loc.street!= "")
				localAddr += loc.street + ", ";
				
			 	if (loc.city!= null)
					localAddr += loc.city + ", ";
				
				/* if (loc.adminArea5!= null)
					localAddr += loc.adminArea5 + ", "; */
				
				if (loc.adminArea3!= null)
					localAddr += loc.adminArea3 + ", ";
				
				if (loc.adminArea1!= null)
					localAddr += loc.adminArea1 + "";
				
				return localAddr;
			}
			
		]]>
	</fx:Script>
	<mx:states>
		<s:State name="queryState"/>
		<s:State name="resultState"/>
		<s:State name="routeState"/>
	</mx:states>


	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->

	</fx:Declarations>
	<s:Border id="bgBorder" width="100%" height="{queryBox.height}" backgroundColor="#FBF8E0" borderColor="#CECFCE"  top="20" borderAlpha="0.6" borderStyle="solid" cornerRadius="5" />
	<mx:VBox id="queryBox" width="100%" includeIn="queryState"  top="20" >        
		
		<s:Group top="10" bottom="10">
			<s:Label x="34" top="10" text="Find a Place, Address or Intersection" color="#848E84" fontWeight="bold" fontFamily="Verdana" fontSize="10"/>
		</s:Group>
		<s:VGroup gap="0" id="queryHolder"/>
	
		<mx:Canvas width="100%" id="holder">
			<mx:Image id="plus" left="34" useHandCursor="true" buttonMode="true"
					  source="assets/images/mq-white2b/plus.png" click="addQueryCntl_clickHandler(event)" width="15" height="15"/>
			<s:Label text="Get Directions" paddingTop="3" x="{plus.x+plus.width+10}"
					 color="#1086C6" fontFamily="Verdana" fontSize="12" fontWeight="bold"
					 useHandCursor="true" buttonMode="true" id="addQueryCntl" click="addQueryCntl_clickHandler(event)"/>
		
			<s:Button id="submitBtn" useHandCursor="true" buttonMode="true" skinClass="skins.ButtonRed" label="Map It" 
					  x="{holder.width-submitBtn.width-62}"  bottom="15" click="clickHandler(event)"/>
			
		</mx:Canvas>
<!--		<s:VGroup paddingBottom="10" paddingLeft="30" paddingRight="30" paddingTop="10" width="100%" height="100%">
			<mx:Image  useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/Image_0011.png"/>
		</s:VGroup>-->
			
	
	</mx:VBox>

	<mx:VBox id="businessBox" verticalScrollPolicy="off" includeIn="resultState" left="5" top="20"  right="5"> 
		<s:Label height="30"/>
		<s:Group top="10" bottom="10">
			<s:Label x="34" top="10" text="Sort :" color="#000000" fontWeight="bold" fontFamily="Verdana" fontSize="10"/>
			<s:Label x="69" top="10" text="Distance" color="#000000" fontWeight="bold" fontFamily="Verdana" fontSize="10"/>
			<s:Label x="124" useHandCursor="true" buttonMode="true" top="10" text="A - Z" color="#0886B5" fontFamily="Verdana" fontSize="10" textDecoration="underline"/>
			<s:Label x="160" useHandCursor="true" buttonMode="true" top="10" text="Best Match" color="#0886B5" fontFamily="Verdana" fontSize="10" textDecoration="underline"/>
			<!--<mx:Image  useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/arrow_back.png" x="10" y="3" click="{this.currentState = 'queryState'}"/>-->
			
			<s:HGroup x="240" y="0" alignmentBaseline="descent">
				<s:Label id="navi1Txt"  color="#000000" fontFamily="Verdana" fontSize="10"/>
				<mx:Image id="back" click="back_clickHandler(event)"  useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/arrow_back.png"/>
				<mx:Image id="front" click="front_clickHandler(event)"  useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/arrow_front.png"/>
			</s:HGroup>
			
		</s:Group>
		<s:VGroup gap="0" id="businessHolder" width="100%"/>
		
		
		<mx:Canvas >
			
			<s:Button left="10" skinClass="skins.ButtonTop" label="Back" click="onBackClick(event)"/>
			
			<s:HGroup x="240" y="0" alignmentBaseline="descent">
				<s:Label id="navi2Txt" color="#000000" fontFamily="Verdana" fontSize="10"/>
				<mx:Image id="back1" click="back_clickHandler(event)"  useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/arrow_back.png"/>
				<mx:Image id="front1" click="front_clickHandler(event)"  useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/arrow_front.png"/>

			</s:HGroup>
			</mx:Canvas>
		
<!--		<s:VGroup paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" width="100%" height="100%">
			<mx:Image  useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/Image_0010.png"/>
			
		</s:VGroup>-->
	</mx:VBox>
	
	
	<mx:VBox id="routeBox" verticalScrollPolicy="off" includeIn="routeState"  left="5" top="20"   right="5">        
		<s:Label height="20"/>
		<s:Group top="10" bottom="10">
			
			<s:Label x="34" top="10" text="Routes : " color="#000000" fontWeight="bold" fontFamily="Verdana" fontSize="10"/>
			<s:Label x="89" top="10" text="Direction" color="#000000" fontWeight="bold" fontFamily="Verdana" fontSize="10"/>
			<!--<mx:Image  useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/arrow_back.png" x="8" y="3" click="{this.currentState = 'queryState'}"/>-->
			
			<s:HGroup x="223" y="10" width="170">
				<s:Label id="navi3Txt" text="1-10 of 120" color="#000000" fontFamily="Verdana" fontSize="10"/>
				<mx:Image click="back_clickHandler(event)"  useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/arrow_back.png"/>
				<mx:Image click="front_clickHandler(event)" useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/arrow_front.png"/>
			</s:HGroup>
			
		</s:Group>
		<s:VGroup gap="0" id="routeHolder" width="100%"/>
		
		
		<mx:Canvas >
			
			<s:Button  skinClass="skins.ButtonTop" left="10" label="Back" click="onBackClick(event)"/>
			<s:HGroup x="224" y="0" width="169">
				<s:Label id="navi4Txt" text="1-10 of 120" color="#000000" fontFamily="Verdana" fontSize="10"/>
				<mx:Image click="back_clickHandler(event)" useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/arrow_back.png"/>
				<mx:Image click="front_clickHandler(event)" useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/arrow_front.png"/>
			</s:HGroup>
		</mx:Canvas>
		
<!--		<s:VGroup paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" width="100%" height="100%">
			<mx:Image  useHandCursor="true" buttonMode="true"  source="assets/images/mq-white2b/Image_0009.png" />
		</s:VGroup>-->
	</mx:VBox>

	
<!--	<s:TextInput x="102" y="53" skinClass="skins.SearchInputText"/>
	<s:TextInput x="102" y="100" skinClass="skins.SearchInputText"/>
	<s:TextInput x="102" y="153" skinClass="skins.SearchInputText"/>
	<s:TextInput x="102" y="200" skinClass="skins.SearchInputText"/>-->
</mx:Canvas>
